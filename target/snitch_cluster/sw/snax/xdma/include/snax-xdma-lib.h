// Copyright 2024 KU Leuven.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Yunhao Deng <yunhao.deng@kuleuven.be>

#pragma once
#include <stdbool.h>
#include "snrt.h"
#include "stdint.h"

// Define the CSR address of xdma, should be generated by scala
#include "snax-xdma-csr-addr.h"

// Data Copy Task
int32_t xdma_memcpy_nd_full_addr(
    uint64_t src, uint64_t dst, uint32_t spatial_stride_src,
    uint32_t spatial_stride_dst, uint32_t temp_dim_src,
    uint32_t* temp_stride_src, uint32_t* temp_bound_src, uint32_t temp_dim_dst,
    uint32_t* temp_stride_dst, uint32_t* temp_bound_dst,
    uint32_t enabled_chan_src, uint32_t enabled_chan_dst,
    uint32_t enabled_byte_dst);

int32_t xdma_memcpy_nd(void* src, void* dst, uint32_t spatial_stride_src,
                       uint32_t spatial_stride_dst, uint32_t temp_dim_src,
                       uint32_t* temp_stride_src, uint32_t* temp_bound_src,
                       uint32_t temp_dim_dst, uint32_t* temp_stride_dst,
                       uint32_t* temp_bound_dst, uint32_t enabled_chan_src,
                       uint32_t enabled_chan_dst, uint32_t enabled_byte_dst);

int32_t xdma_memcpy_1d_full_addr(uint64_t src, uint64_t dst, uint32_t size);

int32_t xdma_memcpy_1d(void* src, void* dst, uint32_t size);

// Multicast Task
int32_t xdma_multicast_nd_full_address(
    uint64_t src, uint64_t* dst, uint32_t dst_num, uint32_t spatial_stride_src,
    uint32_t spatial_stride_dst, uint32_t temp_dim_src,
    uint32_t* temp_stride_src, uint32_t* temp_bound_src, uint32_t temp_dim_dst,
    uint32_t* temp_stride_dst, uint32_t* temp_bound_dst,
    uint32_t enabled_chan_src, uint32_t enabled_chan_dst,
    uint32_t enabled_byte_dst);

int32_t xdma_multicast_nd(void* src, void** dst, uint32_t dst_num,
                          uint32_t spatial_stride_src,
                          uint32_t spatial_stride_dst, uint32_t temp_dim_src,
                          uint32_t* temp_stride_src, uint32_t* temp_bound_src,
                          uint32_t temp_dim_dst, uint32_t* temp_stride_dst,
                          uint32_t* temp_bound_dst, uint32_t enabled_chan_src,
                          uint32_t enabled_chan_dst, uint32_t enabled_byte_dst);

int32_t xdma_multicast_1d_full_address(uint64_t src, uint64_t* dst,
                                       uint32_t dst_num, uint32_t size);

int32_t xdma_multicast_1d(void* src, void** dst, uint32_t dst_num,
                          uint32_t size);

// Extension
int32_t xdma_enable_src_ext(uint8_t ext, uint32_t* csr_value);
int32_t xdma_disable_src_ext(uint8_t ext);
int32_t xdma_enable_dst_ext(uint8_t ext, uint32_t* csr_value);
int32_t xdma_disable_dst_ext(uint8_t ext);

// Start
inline static uint32_t xdma_start() {
    int local_task_id = csrr_ss(XDMA_COMMIT_LOCAL_TASK_PTR);
    int remote_task_id = csrr_ss(XDMA_COMMIT_REMOTE_TASK_PTR);
    csrw_ss(XDMA_START_PTR, 1);
    while (1) {
        // Wait for xdma to start
        if (csrr_ss(XDMA_COMMIT_LOCAL_TASK_PTR) != local_task_id) {
            return csrr_ss(XDMA_COMMIT_LOCAL_TASK_PTR);
        }
        if (csrr_ss(XDMA_COMMIT_REMOTE_TASK_PTR) != remote_task_id) {
            return csrr_ss(XDMA_COMMIT_REMOTE_TASK_PTR);
        }
    }
}

// Wait xdma to finished
static inline void xdma_local_wait(uint32_t task_id) {
    while (csrr_ss(XDMA_FINISH_LOCAL_TASK_PTR) < task_id) {
        // Wait for xdma to finish
    }
}

static inline void xdma_remote_wait(uint32_t task_id) {
    while (csrr_ss(XDMA_FINISH_REMOTE_TASK_PTR) < task_id) {
        // Wait for xdma to finish
    }
}
